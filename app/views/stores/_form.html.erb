



<div  id= "store_form" style="position:relative ; width:1000px;">
    <div class="row" id="form_store">              
        <div class="col-md-4" id="storeinputs">
          <div class="form-group" >
            
  
          <%= form_for [@user , @store] do |f| %>
        
              <%= render 'shared/error_messages', object: f.object %>
                        
              <%= f.text_field :name , :class => 'form-control'  , :placeholder=>"store name"%>
            
              <%= f.text_field :address , :class => 'form-control' , :placeholder=>"address" , :id => "pac-input"%>
      
              <%= f.text_field :phone , :class => 'form-control' , :placeholder=>"phone" %>
                  
              <%= f.text_area :about , :class => 'form-control' , :placeholder=>"about" %>
                
              <h3> store image </h3> <%= f.file_field :image  , :class => 'form-control' %>
              
              <%= f.submit "create store", :class => 'btn btn-primary btn-lg' %>
        
          <% end %>
            
          </div>
      </div>
  </div>
</div> 

   
    <div id="map" style="width:600px; height:400px; border: 2px solid black; position:relative; left:500px; top:-270px">
    
    </div>
   
           
             

    
    
    <script type="text/javascript">


function initAutocomplete() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: -33.8688, lng: 151.2195},
    zoom: 8,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

 
  var markers = [];
  // [START region_getplaces]
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      markers.push(new google.maps.Marker({
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
  
}

    </script>
    
    
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAHycBigCaKN6VQqqZBxtjm4Jux_XJ-0Zc&libraries=places&callback=initAutocomplete"
         async defer></script>

   
   